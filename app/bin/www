#!/usr/bin/env node

require ('babel-polyfill')

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('handbot:server')
var http = require('http')
var https = require("https")
var fs = require ('fs')

const options = {
  key: fs.readFileSync("/etc/letsencrypt/live/handbot.fmckl.se/fullchain.pem"),
  cert: fs.readFileSync("/etc/letsencrypt/live/handbot.fmckl.se/privkey.pem")
};

/**
 * Create HTTP server.
 */

var serverHTTP = http.createServer(app)
serverHTTP.listen('80', () => {
   app.emit('listeningHTTP', null)
})

var serverHTTPS = https.createServer(options, app)
serverHTTPS.listen('443', () => {
   app.emit('listeningHTTPS', null)
})

/**
 * Listen on provided port, on all network interfaces.
 */

serverHTTP.on('error', onError)
serverHTTPS.on('error', onError)

serverHTTP.on('listeningHTTP', onListeningHTTP)
serverHTTPS.on('listeningHTTPS', onListeningHTTPS)

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningHTTP () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('HTTP - Listening on ' + bind)
}

function onListeningHTTPS () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('HTTPS - Listening on ' + bind)
}
